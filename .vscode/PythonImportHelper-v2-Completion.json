[
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "loggers",
        "importPath": "project.logs",
        "description": "project.logs",
        "isExtraImport": true,
        "detail": "project.logs",
        "documentation": {}
    },
    {
        "label": "loggers",
        "importPath": "project.logs",
        "description": "project.logs",
        "isExtraImport": true,
        "detail": "project.logs",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "BasicAuth",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "hdrs",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "middleware",
        "importPath": "aiohttp.web",
        "description": "aiohttp.web",
        "isExtraImport": true,
        "detail": "aiohttp.web",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "aiohttp.web",
        "description": "aiohttp.web",
        "isExtraImport": true,
        "detail": "aiohttp.web",
        "documentation": {}
    },
    {
        "label": "json_response",
        "importPath": "aiohttp.web",
        "description": "aiohttp.web",
        "isExtraImport": true,
        "detail": "aiohttp.web",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "aiohttp.web",
        "description": "aiohttp.web",
        "isExtraImport": true,
        "detail": "aiohttp.web",
        "documentation": {}
    },
    {
        "label": "run_app",
        "importPath": "aiohttp.web",
        "description": "aiohttp.web",
        "isExtraImport": true,
        "detail": "aiohttp.web",
        "documentation": {}
    },
    {
        "label": "auth_db",
        "importPath": "project.api.db_handlers",
        "description": "project.api.db_handlers",
        "isExtraImport": true,
        "detail": "project.api.db_handlers",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "project.settings.load_settings",
        "description": "project.settings.load_settings",
        "isExtraImport": true,
        "detail": "project.settings.load_settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "project.settings.load_settings",
        "description": "project.settings.load_settings",
        "isExtraImport": true,
        "detail": "project.settings.load_settings",
        "documentation": {}
    },
    {
        "label": "Right",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "Right",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "Right",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "Right",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "Right",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "project.db.models",
        "description": "project.db.models",
        "isExtraImport": true,
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "Responses",
        "importPath": "project.api.db_handlers.crud.create_response",
        "description": "project.api.db_handlers.crud.create_response",
        "isExtraImport": true,
        "detail": "project.api.db_handlers.crud.create_response",
        "documentation": {}
    },
    {
        "label": "Responses",
        "importPath": "project.api.db_handlers.crud.create_response",
        "description": "project.api.db_handlers.crud.create_response",
        "isExtraImport": true,
        "detail": "project.api.db_handlers.crud.create_response",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DATE",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "setup_swagger",
        "importPath": "aiohttp_swagger",
        "description": "aiohttp_swagger",
        "isExtraImport": true,
        "detail": "aiohttp_swagger",
        "documentation": {}
    },
    {
        "label": "setup_routes",
        "importPath": "project.api.routes",
        "description": "project.api.routes",
        "isExtraImport": true,
        "detail": "project.api.routes",
        "documentation": {}
    },
    {
        "label": "close_pg",
        "importPath": "project.api.settings_app",
        "description": "project.api.settings_app",
        "isExtraImport": true,
        "detail": "project.api.settings_app",
        "documentation": {}
    },
    {
        "label": "init_pg",
        "importPath": "project.api.settings_app",
        "description": "project.api.settings_app",
        "isExtraImport": true,
        "detail": "project.api.settings_app",
        "documentation": {}
    },
    {
        "label": "BasicAuthMiddleware",
        "importPath": "project.api.api_handlers.auth",
        "description": "project.api.api_handlers.auth",
        "isExtraImport": true,
        "detail": "project.api.api_handlers.auth",
        "documentation": {}
    },
    {
        "label": "check_query_create",
        "importPath": "project.api.api_handlers.crud.сhecking_requests",
        "description": "project.api.api_handlers.crud.сhecking_requests",
        "isExtraImport": true,
        "detail": "project.api.api_handlers.crud.сhecking_requests",
        "documentation": {}
    },
    {
        "label": "check_query_delete",
        "importPath": "project.api.api_handlers.crud.сhecking_requests",
        "description": "project.api.api_handlers.crud.сhecking_requests",
        "isExtraImport": true,
        "detail": "project.api.api_handlers.crud.сhecking_requests",
        "documentation": {}
    },
    {
        "label": "check_query_read",
        "importPath": "project.api.api_handlers.crud.сhecking_requests",
        "description": "project.api.api_handlers.crud.сhecking_requests",
        "isExtraImport": true,
        "detail": "project.api.api_handlers.crud.сhecking_requests",
        "documentation": {}
    },
    {
        "label": "check_query_update",
        "importPath": "project.api.api_handlers.crud.сhecking_requests",
        "description": "project.api.api_handlers.crud.сhecking_requests",
        "isExtraImport": true,
        "detail": "project.api.api_handlers.crud.сhecking_requests",
        "documentation": {}
    },
    {
        "label": "date_iso",
        "importPath": "project.api.api_handlers.crud.сhecking_requests",
        "description": "project.api.api_handlers.crud.сhecking_requests",
        "isExtraImport": true,
        "detail": "project.api.api_handlers.crud.сhecking_requests",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "project.api.db_handlers.crud.CREATE",
        "description": "project.api.db_handlers.crud.CREATE",
        "isExtraImport": true,
        "detail": "project.api.db_handlers.crud.CREATE",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "importPath": "project.api.db_handlers.crud.DELETE",
        "description": "project.api.db_handlers.crud.DELETE",
        "isExtraImport": true,
        "detail": "project.api.db_handlers.crud.DELETE",
        "documentation": {}
    },
    {
        "label": "read_users",
        "importPath": "project.api.db_handlers.crud.READ",
        "description": "project.api.db_handlers.crud.READ",
        "isExtraImport": true,
        "detail": "project.api.db_handlers.crud.READ",
        "documentation": {}
    },
    {
        "label": "update_user",
        "importPath": "project.api.db_handlers.crud.UPDATE",
        "description": "project.api.db_handlers.crud.UPDATE",
        "isExtraImport": true,
        "detail": "project.api.db_handlers.crud.UPDATE",
        "documentation": {}
    },
    {
        "label": "handCrud",
        "importPath": "project.api.handlers",
        "description": "project.api.handlers",
        "isExtraImport": true,
        "detail": "project.api.handlers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "project.api.app",
        "description": "project.api.app",
        "isExtraImport": true,
        "detail": "project.api.app",
        "documentation": {}
    },
    {
        "label": "SourceFileLoader",
        "importPath": "importlib.machinery",
        "description": "importlib.machinery",
        "isExtraImport": true,
        "detail": "importlib.machinery",
        "documentation": {}
    },
    {
        "label": "parse_requirements",
        "importPath": "pkg_resources",
        "description": "pkg_resources",
        "isExtraImport": true,
        "detail": "pkg_resources",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "string_to_date",
        "kind": 2,
        "importPath": "project.api.api_handlers.crud.types_data",
        "description": "project.api.api_handlers.crud.types_data",
        "peekOfCode": "def string_to_date(string: str):\n    logger.debug('Start creating a string in a date object')\n    try:\n        date = dt.fromisoformat(string)\n        if isinstance(date, dt):\n            logger.debug(f'There are no errors in the line, return: {dt}')\n            return date\n        else:\n            logger.debug('Error in the line representing the date')\n            False",
        "detail": "project.api.api_handlers.crud.types_data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.api_handlers.crud.types_data",
        "description": "project.api.api_handlers.crud.types_data",
        "peekOfCode": "logger = loggers.get_logger(__name__)\ndef string_to_date(string: str):\n    logger.debug('Start creating a string in a date object')\n    try:\n        date = dt.fromisoformat(string)\n        if isinstance(date, dt):\n            logger.debug(f'There are no errors in the line, return: {dt}')\n            return date\n        else:\n            logger.debug('Error in the line representing the date')",
        "detail": "project.api.api_handlers.crud.types_data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.api_handlers.crud.сhecking_requests",
        "description": "project.api.api_handlers.crud.сhecking_requests",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def check_query_create(query_rel):\n    logger.debug(\"Start checking parameters /create\")\n    try:\n        if len(query_rel) == 0:\n            logger.debug(\"Error in the number of request parameters\")\n            return False\n        check_keys = (\n            \"login\",\n            \"password\",",
        "detail": "project.api.api_handlers.crud.сhecking_requests",
        "documentation": {}
    },
    {
        "label": "BasicAuthMiddleware",
        "kind": 6,
        "importPath": "project.api.api_handlers.auth",
        "description": "project.api.api_handlers.auth",
        "peekOfCode": "class BasicAuthMiddleware:\n    def parse_auth_header(self, request):\n        logger.debug('Parse auth')\n        auth_header = request.headers.get(hdrs.AUTHORIZATION)\n        if not auth_header:\n            return None\n        try:\n            auth = BasicAuth.decode(auth_header=auth_header)\n        except ValueError:  # pragma: no cover\n            auth = None",
        "detail": "project.api.api_handlers.auth",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.api_handlers.auth",
        "description": "project.api.api_handlers.auth",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@middleware\nclass BasicAuthMiddleware:\n    def parse_auth_header(self, request):\n        logger.debug('Parse auth')\n        auth_header = request.headers.get(hdrs.AUTHORIZATION)\n        if not auth_header:\n            return None\n        try:\n            auth = BasicAuth.decode(auth_header=auth_header)",
        "detail": "project.api.api_handlers.auth",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.db_handlers.crud.CREATE",
        "description": "project.api.db_handlers.crud.CREATE",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def create_user(session, query_rel):\n    logger.debug(\"Start of a query to the database\")\n    # You need to make a session without begin()\n    # and use flush () to get the id of the object being created\n    # open session\n    try:\n        with session(autoflush=False) as session:\n            with session.begin():\n                if await _login_exist(session, query_rel) is False:",
        "detail": "project.api.db_handlers.crud.CREATE",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.db_handlers.crud.DELETE",
        "description": "project.api.db_handlers.crud.DELETE",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def delete_user(session, query_rel):\n    logger.debug(\"Start deleting a user from the database\")\n    try:\n        # open session\n        with session() as session:\n            with session.begin():\n                delete = await _query_db(session, query_rel)\n                if delete is False:\n                    return False",
        "detail": "project.api.db_handlers.crud.DELETE",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.db_handlers.crud.READ",
        "description": "project.api.db_handlers.crud.READ",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def read_users(session, limit):\n    logger.debug(\"start of a read request to the database\")\n    try:\n        # open session\n        with session() as session:\n            with session.begin():\n                users, permissions = await _all_user(session, limit)\n                if users is False:\n                    return False",
        "detail": "project.api.db_handlers.crud.READ",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.db_handlers.crud.UPDATE",
        "description": "project.api.db_handlers.crud.UPDATE",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def update_user(session, query_rel):\n    logger.debug(\"start of a request to the database to update the user\")\n    # open session\n    try:\n        with session() as session:\n            with session.begin():\n                update = await _updater(session, query_rel)\n                return update\n    except Exception as err:",
        "detail": "project.api.db_handlers.crud.UPDATE",
        "documentation": {}
    },
    {
        "label": "Responses",
        "kind": 6,
        "importPath": "project.api.db_handlers.crud.create_response",
        "description": "project.api.db_handlers.crud.create_response",
        "peekOfCode": "class Responses:\n    \"\"\"\n    Data handler from the database and sending response\n    \"\"\"\n    __slots__ = ()\n    @staticmethod\n    async def read(user, permission):\n        logger.debug('Create response api/read')\n        try:\n            response = {\"users\": {",
        "detail": "project.api.db_handlers.crud.create_response",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.db_handlers.crud.create_response",
        "description": "project.api.db_handlers.crud.create_response",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Responses:\n    \"\"\"\n    Data handler from the database and sending response\n    \"\"\"\n    __slots__ = ()\n    @staticmethod\n    async def read(user, permission):\n        logger.debug('Create response api/read')\n        try:",
        "detail": "project.api.db_handlers.crud.create_response",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.db_handlers.auth_db",
        "description": "project.api.db_handlers.auth_db",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def autorization(request, login, password):\n    logger.debug(\"Start autorization\")\n    session = request.app[\"session\"]\n    async def search_user(session):\n        # search user\n        logger.debug(\"Getting user objects and their rights\")\n        try:\n            # find\n            user = (",
        "detail": "project.api.db_handlers.auth_db",
        "documentation": {}
    },
    {
        "label": "swagger_path",
        "kind": 2,
        "importPath": "project.api.app",
        "description": "project.api.app",
        "peekOfCode": "def swagger_path():\n    try:\n        logger.info(\"Connect swagger_path\")\n        setting = Settings()\n        path = setting.swagger_path()\n        logger.debug(f\"Got the path swagger: {path}\")\n        return path\n    except Exception as err:\n        logger.exception(str(err))\ndef create_app() -> Application:",
        "detail": "project.api.app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "project.api.app",
        "description": "project.api.app",
        "peekOfCode": "def create_app() -> Application:\n    try:\n        logger.info(\"Getting started with app creation\")\n        app = Application()\n        # Connect swagger doc\n        setup_swagger(app=app, swagger_from_file=swagger_path(), swagger_url=\"/api/doc\")\n        logger.debug(\"setup swagger\")\n        # Setup routes\n        setup_routes(app)\n        # Connect and close database",
        "detail": "project.api.app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.app",
        "description": "project.api.app",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef swagger_path():\n    try:\n        logger.info(\"Connect swagger_path\")\n        setting = Settings()\n        path = setting.swagger_path()\n        logger.debug(f\"Got the path swagger: {path}\")\n        return path\n    except Exception as err:\n        logger.exception(str(err))",
        "detail": "project.api.app",
        "documentation": {}
    },
    {
        "label": "handCrud",
        "kind": 6,
        "importPath": "project.api.handlers",
        "description": "project.api.handlers",
        "peekOfCode": "class handCrud:\n    __slots__ = ()\n    @staticmethod\n    @auth.required\n    async def hand_create(request):\n        try:\n            logger.info(\"start request CREATE\")\n            query = request.rel_url.query\n            logger.debug(f\"Query received {query}\")\n            session = request.app[\"session\"]",
        "detail": "project.api.handlers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.handlers",
        "description": "project.api.handlers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nauth = BasicAuthMiddleware()\nclass handCrud:\n    __slots__ = ()\n    @staticmethod\n    @auth.required\n    async def hand_create(request):\n        try:\n            logger.info(\"start request CREATE\")\n            query = request.rel_url.query",
        "detail": "project.api.handlers",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 5,
        "importPath": "project.api.handlers",
        "description": "project.api.handlers",
        "peekOfCode": "auth = BasicAuthMiddleware()\nclass handCrud:\n    __slots__ = ()\n    @staticmethod\n    @auth.required\n    async def hand_create(request):\n        try:\n            logger.info(\"start request CREATE\")\n            query = request.rel_url.query\n            logger.debug(f\"Query received {query}\")",
        "detail": "project.api.handlers",
        "documentation": {}
    },
    {
        "label": "setup_routes",
        "kind": 2,
        "importPath": "project.api.routes",
        "description": "project.api.routes",
        "peekOfCode": "def setup_routes(app: Application):\n    # Create / Read / Update / Delete\n    try:\n        logger.info(\"Add routes\")\n        app.router.add_get(\"/api/v1/create\", handCrud.hand_create)\n        app.router.add_get(\"/api/v1/read\", handCrud.hand_read)\n        app.router.add_get(\"/api/v1/update\", handCrud.hand_update)\n        app.router.add_get(\"/api/v1/delete\", handCrud.hand_delete)\n        logger.info(\"Routes built\")\n    except Exception as err:",
        "detail": "project.api.routes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.routes",
        "description": "project.api.routes",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef setup_routes(app: Application):\n    # Create / Read / Update / Delete\n    try:\n        logger.info(\"Add routes\")\n        app.router.add_get(\"/api/v1/create\", handCrud.hand_create)\n        app.router.add_get(\"/api/v1/read\", handCrud.hand_read)\n        app.router.add_get(\"/api/v1/update\", handCrud.hand_update)\n        app.router.add_get(\"/api/v1/delete\", handCrud.hand_delete)\n        logger.info(\"Routes built\")",
        "detail": "project.api.routes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.api.settings_app",
        "description": "project.api.settings_app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def init_pg(app):\n    try:\n        logger.info(\"Start of data base initialization\")\n        db_url = os.environ[\"POSTGRES_HOST\"]\n        logger.info(f\"Connect to {db_url}\")\n        engine = create_engine(db_url)\n        app[\"db\"] = engine\n        app[\"session\"] = sessionmaker(bind=engine)\n        logger.debug(\"end of database initialization\")",
        "detail": "project.api.settings_app",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    rights = op.create_table('rights',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('permission', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('id'),\n    sa.UniqueConstraint('id')\n    )",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('users')\n    op.drop_table('rights')\n    # ### end Alembic commands ###",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "revision = 'dc7a907050ec'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndate = dt.fromisoformat('1992-10-22')\nuser_admin = (0, 'admin', 'admin', 'admin', 'admin', date)\nright_admin = (0, 0, 2)\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    rights = op.create_table('rights',",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndate = dt.fromisoformat('1992-10-22')\nuser_admin = (0, 'admin', 'admin', 'admin', 'admin', date)\nright_admin = (0, 0, 2)\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    rights = op.create_table('rights',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndate = dt.fromisoformat('1992-10-22')\nuser_admin = (0, 'admin', 'admin', 'admin', 'admin', date)\nright_admin = (0, 0, 2)\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    rights = op.create_table('rights',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "depends_on = None\ndate = dt.fromisoformat('1992-10-22')\nuser_admin = (0, 'admin', 'admin', 'admin', 'admin', date)\nright_admin = (0, 0, 2)\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    rights = op.create_table('rights',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('permission', sa.Integer(), nullable=False),",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "date = dt.fromisoformat('1992-10-22')\nuser_admin = (0, 'admin', 'admin', 'admin', 'admin', date)\nright_admin = (0, 0, 2)\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    rights = op.create_table('rights',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('permission', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "user_admin",
        "kind": 5,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "user_admin = (0, 'admin', 'admin', 'admin', 'admin', date)\nright_admin = (0, 0, 2)\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    rights = op.create_table('rights',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('permission', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('id'),",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "right_admin",
        "kind": 5,
        "importPath": "project.db.alembic.versions.dc7a907050ec_first",
        "description": "project.db.alembic.versions.dc7a907050ec_first",
        "peekOfCode": "right_admin = (0, 0, 2)\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    rights = op.create_table('rights',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('permission', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('id'),\n    sa.UniqueConstraint('id')",
        "detail": "project.db.alembic.versions.dc7a907050ec_first",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "project.db.alembic.env",
        "description": "project.db.alembic.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "project.db.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "project.db.alembic.env",
        "description": "project.db.alembic.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "project.db.alembic.env",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project.db.alembic.env",
        "description": "project.db.alembic.env",
        "peekOfCode": "BASE_DIR = pathlib.Path(__file__).parent.parent.parent.parent\nload_dotenv(os.path.join(BASE_DIR, \".env\"))\nsys.path.append(BASE_DIR)\nfrom project.db.models import Base\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\nconfig.set_main_option(\"sqlalchemy.url\", os.environ[\"POSTGRES_HOST\"])\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.",
        "detail": "project.db.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "project.db.alembic.env",
        "description": "project.db.alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", os.environ[\"POSTGRES_HOST\"])\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "project.db.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "project.db.alembic.env",
        "description": "project.db.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "project.db.alembic.env",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "project.db.models",
        "description": "project.db.models",
        "peekOfCode": "class BaseModel(Base):\n    __abstract__ = True\n    id = Column(\n        Integer, nullable=False,\n        unique=True, primary_key=True,\n        autoincrement=True)\n    def __repr__(self):\n        return \"<{0.__class__.__name__}(id={0.id!r})>\".format(self)\nclass User(BaseModel):\n    __tablename__ = 'users'",
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "project.db.models",
        "description": "project.db.models",
        "peekOfCode": "class User(BaseModel):\n    __tablename__ = 'users'\n    first_name = Column(VARCHAR(255), nullable=False)\n    last_name = Column(VARCHAR(255), nullable=True)\n    login = Column(VARCHAR(255), nullable=False)\n    password = Column(VARCHAR(255), nullable=False)\n    date_birth = Column(DATE, nullable=True)\n    def __init__(self, first_name, last_name, login, password, date_birth):\n        self.first_name = first_name\n        self.last_name = last_name",
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "Right",
        "kind": 6,
        "importPath": "project.db.models",
        "description": "project.db.models",
        "peekOfCode": "class Right(BaseModel):\n    __tablename__ = 'rights'\n    user_id = Column(\n        Integer, nullable=False)\n    permission = Column(Integer, nullable=False)\n    def __init__(self, user_id, permission):\n        self.user_id = user_id\n        self.permission = permission",
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "project.db.models",
        "description": "project.db.models",
        "peekOfCode": "Base = declarative_base()\nclass BaseModel(Base):\n    __abstract__ = True\n    id = Column(\n        Integer, nullable=False,\n        unique=True, primary_key=True,\n        autoincrement=True)\n    def __repr__(self):\n        return \"<{0.__class__.__name__}(id={0.id!r})>\".format(self)\nclass User(BaseModel):",
        "detail": "project.db.models",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "kind": 2,
        "importPath": "project.logs.loggers",
        "description": "project.logs.loggers",
        "peekOfCode": "def setup_logger(mode):\n    if mode is True:\n        logging.basicConfig(\n            level=logging.DEBUG,\n            format=_log_format,\n            handlers=[logging.FileHandler(\"logs/debug.log\", mode='a'),\n                      logging.StreamHandler()])\n    else:\n        logging.basicConfig(\n            level=logging.INFO,",
        "detail": "project.logs.loggers",
        "documentation": {}
    },
    {
        "label": "get_file_handler",
        "kind": 2,
        "importPath": "project.logs.loggers",
        "description": "project.logs.loggers",
        "peekOfCode": "def get_file_handler():\n    file_handler = logging.FileHandler(\"logs/app.log\")\n    file_handler.setLevel(logging.WARNING)\n    file_handler.setFormatter(logging.Formatter(_log_format))\n    return file_handler",
        "detail": "project.logs.loggers",
        "documentation": {}
    },
    {
        "label": "_log_format",
        "kind": 5,
        "importPath": "project.logs.loggers",
        "description": "project.logs.loggers",
        "peekOfCode": "_log_format = f\"%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s\"\ndef setup_logger(mode):\n    if mode is True:\n        logging.basicConfig(\n            level=logging.DEBUG,\n            format=_log_format,\n            handlers=[logging.FileHandler(\"logs/debug.log\", mode='a'),\n                      logging.StreamHandler()])\n    else:\n        logging.basicConfig(",
        "detail": "project.logs.loggers",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "project.settings.load_settings",
        "description": "project.settings.load_settings",
        "peekOfCode": "class Settings:\n    BASE_DIR = pathlib.Path(__file__).parent\n    __yaml__ = '.yaml'\n    __responses__ = f\"{BASE_DIR}/docs/responses/errors{__yaml__}\"\n    __swagger__ = f\"{BASE_DIR}/docs/swagger/swagger{__yaml__}\"\n    __permissions__ = f\"{BASE_DIR}/docs/permissions/permissions_crud{__yaml__}\"\n    def __init__(self):\n        try:\n            logger.info(\"start of settings\")\n            with open(self.__responses__, 'r') as f:",
        "detail": "project.settings.load_settings",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "project.settings.load_settings",
        "description": "project.settings.load_settings",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Settings:\n    BASE_DIR = pathlib.Path(__file__).parent\n    __yaml__ = '.yaml'\n    __responses__ = f\"{BASE_DIR}/docs/responses/errors{__yaml__}\"\n    __swagger__ = f\"{BASE_DIR}/docs/swagger/swagger{__yaml__}\"\n    __permissions__ = f\"{BASE_DIR}/docs/permissions/permissions_crud{__yaml__}\"\n    def __init__(self):\n        try:\n            logger.info(\"start of settings\")",
        "detail": "project.settings.load_settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app_run",
        "description": "app_run",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(__file__))\nload_dotenv(os.path.join(BASE_DIR, \".env\"))\nsys.path.append(BASE_DIR)\n# Logger\nlogger = logging.getLogger(__name__)\n# Argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    \"-H\", \"--host\",\n    help=\"Enter the ip of the server on which it will be launched, only the string is accepted: '0.0.0.0'\",",
        "detail": "app_run",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app_run",
        "description": "app_run",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    \"-H\", \"--host\",\n    help=\"Enter the ip of the server on which it will be launched, only the string is accepted: '0.0.0.0'\",\n    type=str, default='0.0.0.0')\nparser.add_argument(\"-P\", \"--port\", help=\"Enter the port of the server on which it will run\", type=int, default=3000)\nparser.add_argument(\"-D\", \"--debug\", help=\"on debug mode True | default: False\", type=bool, default=False)\nargs = parser.parse_args()",
        "detail": "app_run",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "app_run",
        "description": "app_run",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\n    \"-H\", \"--host\",\n    help=\"Enter the ip of the server on which it will be launched, only the string is accepted: '0.0.0.0'\",\n    type=str, default='0.0.0.0')\nparser.add_argument(\"-P\", \"--port\", help=\"Enter the port of the server on which it will run\", type=int, default=3000)\nparser.add_argument(\"-D\", \"--debug\", help=\"on debug mode True | default: False\", type=bool, default=False)\nargs = parser.parse_args()\nif __name__ == '__main__':\n    loggers.setup_logger(args.debug)",
        "detail": "app_run",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "app_run",
        "description": "app_run",
        "peekOfCode": "args = parser.parse_args()\nif __name__ == '__main__':\n    loggers.setup_logger(args.debug)\n    logger.info('start application')\n    app = create_app()\n    run_app(app, host=args.host, port=args.port)",
        "detail": "app_run",
        "documentation": {}
    },
    {
        "label": "load_requirements",
        "kind": 2,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "def load_requirements(fname: str) -> list:\n    requirements = []\n    with open(fname, \"r\") as fp:\n        for req in parse_requirements(fp.read()):\n            extras = \"[{}]\".format(\",\".join(req.extras)) if req.extras else \"\"\n            requirements.append(\"{}{}{}\".format(req.name, extras, req.specifier))\n    return requirements\nsetup(\n    name=module_name,\n    version=module.__version__,",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "module_name",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "module_name = \"project\"\n# Модуль может быть еще не установлен (или установлена другая версия), поэтому\n# необходимо загружать __init__.py с помощью machinery.\nmodule = SourceFileLoader(\n    module_name, os.path.join(module_name, \"__init__.py\")\n).load_module()\ndef load_requirements(fname: str) -> list:\n    requirements = []\n    with open(fname, \"r\") as fp:\n        for req in parse_requirements(fp.read()):",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "module = SourceFileLoader(\n    module_name, os.path.join(module_name, \"__init__.py\")\n).load_module()\ndef load_requirements(fname: str) -> list:\n    requirements = []\n    with open(fname, \"r\") as fp:\n        for req in parse_requirements(fp.read()):\n            extras = \"[{}]\".format(\",\".join(req.extras)) if req.extras else \"\"\n            requirements.append(\"{}{}{}\".format(req.name, extras, req.specifier))\n    return requirements",
        "detail": "setup",
        "documentation": {}
    }
]