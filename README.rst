.. role:: shell(code)
   :language: shell

Backend API (CRUD).
==========
Описание проекта
-----------------------------------------

Code Blocks (Preformatted text):
Небольшой шаблон для возможных проектов, с использованием aiohttp, swagger, alembic, sqlalchemy.
Функционал программы мал, и показателен. Реализован CRUD - это четыре базовые функции, используемые 
при работе с базами данных, в этом случае PostgreSQL, расшифровка CRUD: Cоздание (англ. create), 
чтение (read), модификация (update), удаление (delete). 

Проект даёт доступ к API только после аутентификации (авторизации (логин / пароль)),
изначально заведён лишь 1 пользователь имеющий право делать всё, кроме каких либо 
изменений / удаления себя же.

Доступ к API реализован на следующей базе:
* Уровень 2. Имеет доступ ко всем запросам.
* Уровень 1. Доступ только к чтению информации.
* Уровень 0. Бан.

Также для более глубокого понимания как работает API была добавлена Swagger Doc.
Дающая возможность посмотреть на запросы, и проверить как они работают.

Всего ответов от запросов здесь можно ожидать 3:
* status 200.
* status 404.
* и список пользователей в /api/v1/read

Конечно можно добавить ответы более развёрнутые, но необходимо ли это? Думаю нет.
Это же шаблон? Да.

Конечно из минусов это постоянное чтение файлов "project/settings/load_settings"
при аутентификации. Это нужно вынести из файла. Лишние загрузки ни к чему.
А конфигурировать такие настройки в production - не имеют никакого смысла.

Какие возможны улучшения? Да их тут можно назвать милионы. Даже к такому малому
функционалу. Вот например что я реализовал для себя, но не решил достать из ящика
и положить сюда.

Вот несколько реализованных мною идей, но не попавшим сюда (потому что не знаю,
нужно ли это, это лишь шаблон). Но возможно оно может пригодиться.

1. Идея в том чтобы получить все ключи запроса,
и если какой либо обязательный не был найден - указать в чём ошибка. 
2. Поиск (метод read). В этом проекте он реализован лишь по количеству последних
записей. Но возможность выдавать запросы по разным ключам, и фильтровать ответ
на их основании - отличная мысль.
3. Обновить (метод update), та же история что и с Read, но более усложнённая.
Первые параметры лишь указывают кого. Вторые же обновляют его по задающимся ключам,
не указав которые - остаются как есть.
4. Удаление (метод delete), я оставлял по id и login в обязательных запросах. Но
реализовать массовое удаление разве мешает? Тот же метод с наполнением условий,
и удачное удаление по году рождения или их разрешениям - обеспечено.

Быстрый вариант разворачивания в Docker
-----------------------------------------
С помощью docker-compose:

.. code-block:: shell

      docker-compose -f docker-compose-dev.yaml up --build

С помощью make:

.. code-block:: shell

      make compose-dev

Это запутсит три контейнера:
- postgres
- application
- alembic (завершит работу после применения миграции)

Чтобы запустить без применения миграции:
-----------------------------------------

С помощью docker-compose:

.. code-block:: shell

      docker-compose up --build -d

С помощью make:

.. code-block:: shell

      make compose


Это запутсит два контейнера:
- postgres
- application

Чтобы применить миграции нужно выполнить:
---------------

В контейнере:

.. code-block:: shell
      
      docker-compose run app alembic upgrade head

По адресу:

.. code-block:: shell

      python3.8 project/db --pg-url postgresql://admin:admin@0.0.0.0:5442/simalend upgrade head

Как очистить базу данных полученную с контейнера?
-----------------------------------------

С помощью make:

.. code-block:: shell

      make cleandb

После запуска
==========

Будет открыт доступ по хосту:
---------------
* http://127.0.0.1:3000/

Swagger документация
---------------
* http://127.0.0.1:3000/api/doc


Разработка
==========

Быстрые команды
---------------
.. code-block:: shell

      `make` Отобразить список доступных команд
      `make devenv` Создать и настроить виртуальное окружение для разработки
      `make postgres` Поднять Docker-контейнер с PostgreSQL
      `make clean` Удалить файлы, созданные модулем `distutils`
      `make sdist` Создать `source distribution`
      `make docker` Собрать Docker-образ
      `make upload` Загрузить Docker-образ на hub.docker.com
      `make compose` Собрать и запустить проект в Docker
      `make cleanedb` очистить базу данных контейнера

Как подготовить окружение для разработки?
-----------------------------------------
.. code-block:: shell

    make devenv
    make postgres
    source env/bin/activate
    alembic upgrade head
    python app_run.py

После выполненных команд приложение будет 
доступно по локальному адресу 0.0.0.0:3000


Если хотите снова запустить базу данных в контейнере
и применить миграции

.. code-block:: shell

    make postgres
    alembic upgrade head

Аргументы для запуска приложения
==========

Конфигурирование приложения
-----------------------------------------
* -H --host - На каком адресе приложение будет работать
* -P --port - На каком порту приложение будет работать
* -D --debug - Включает режим дебага. Вывод в консоль и .log файл.

Конфигурирование подключения к базе данных
-----------------------------------------
* --pg-url - Укажите прямой путь подключения к базе данных

Таким образом можно сконфигурировать приложение:
-----------------------------------------
.. code-block:: shell

    python3.8 app_run.py -H 127.0.0.12 -P 2414 -D \
    --pg-url postgresql://admin:admin@0.0.0.0:5442/simalend

Применение миграции через обертку:
-----------------------------------------
.. code-block:: shell

    python3.8 project/db --pg-url postgresql://admin:admin@0.0.0.0:5442/simalend upgrade head

Эту команду не следует запускать по root. Возможна ошибка.

Все эти команды дадут возможность сконфигурировать приложение нужным образом.
